# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.6.1

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            sudo apt-get update -yqq
            sudo apt-get install -yqq libmp3lame-dev libopus-dev libvpx-dev libx264-dev yasm
            sudo apt install \
              autoconf \
              automake \
              build-essential \
              cmake \
              libass-dev \
              libfreetype6-dev \
              libjpeg-dev \
              libtheora-dev \
              libtool \
              libvorbis-dev \
              libx264-dev \
              pkg-config \
              wget \
              yasm \
              zlib1g-dev

            wget http://ffmpeg.org/releases/ffmpeg-3.2.tar.bz2
            tar -xjf ffmpeg-3.2.tar.bz2
            cd ffmpeg-3.2

            ./configure --disable-static --enable-shared --disable-doc
            make
            sudo make install
            cd ..
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            ./runtests

      - store_artifacts:
          path: test-reports
          destination: test-reports
